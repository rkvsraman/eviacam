# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






pkgdatadir = $(datadir)/eviacam
pkgincludedir = $(includedir)/eviacam
pkglibdir = $(libdir)/eviacam
pkglibexecdir = $(libexecdir)/eviacam
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = eviacam$(EXEEXT) eviacamloader$(EXEEXT)
subdir = src
DIST_COMMON = $(dist_noinst_DATA) $(dist_pkgdata_DATA) \
	$(noinst_HEADERS) $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/eviacamloader.c.in $(srcdir)/version.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/gettext.m4 \
	$(top_srcdir)/m4/iconv.m4 $(top_srcdir)/m4/lib-ld.m4 \
	$(top_srcdir)/m4/lib-link.m4 $(top_srcdir)/m4/lib-prefix.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/nls.m4 \
	$(top_srcdir)/m4/po.m4 $(top_srcdir)/m4/progtest.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = version.h eviacamloader.c
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(desktopdir)" \
	"$(DESTDIR)$(pkgdatadir)" "$(DESTDIR)$(pixmapdir)"
PROGRAMS = $(bin_PROGRAMS)
am_eviacam_OBJECTS = eviacam-wgetkey.$(OBJEXT) \
	eviacam-cautostart.$(OBJEXT) eviacam-ckeyboardcode.$(OBJEXT) \
	eviacam-clickwindow.$(OBJEXT) \
	eviacam-clickwindowbitmap.$(OBJEXT) \
	eviacam-clickwindowbitmapvertical.$(OBJEXT) \
	eviacam-clickwindowcontroller.$(OBJEXT) \
	eviacam-clickwindowtext.$(OBJEXT) \
	eviacam-clickwindowvertical.$(OBJEXT) \
	eviacam-cmotioncalibration.$(OBJEXT) \
	eviacam-eviacamapp.$(OBJEXT) eviacam-visionpipeline.$(OBJEXT) \
	eviacam-viacamcontroller.$(OBJEXT) eviacam-wabout.$(OBJEXT) \
	eviacam-wconfiguration.$(OBJEXT) \
	eviacam-wconfirmcalibration.$(OBJEXT) \
	eviacam-wmotioncalibrationx.$(OBJEXT) \
	eviacam-wmotioncalibrationy.$(OBJEXT) \
	eviacam-wviacam.$(OBJEXT) eviacam-cvisualalert.$(OBJEXT) \
	eviacam-wwizard.$(OBJEXT) eviacam-wwizardmanager.$(OBJEXT) \
	eviacam-wcameradialog.$(OBJEXT) \
	eviacam-hotkeymanager.$(OBJEXT) eviacam-dwellclick.$(OBJEXT) \
	eviacam-gestureclick.$(OBJEXT) eviacam-pointeraction.$(OBJEXT) \
	eviacam-paths.$(OBJEXT) eviacam-checkupdates.$(OBJEXT) \
	eviacam-checkupdates_ui.$(OBJEXT) eviacam-website.$(OBJEXT)
eviacam_OBJECTS = $(am_eviacam_OBJECTS)
eviacam_DEPENDENCIES = $(top_builddir)/wxutil/libwxutil.la \
	$(top_builddir)/simplelog/libsimplelog.la \
	$(top_builddir)/creavision/libcreavision.la \
	$(top_builddir)/creavision/libwebcam/libwebcam.la \
	$(top_builddir)/wxcamwindow/libwxcamwindow.la
eviacam_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(eviacam_LDFLAGS) $(LDFLAGS) -o $@
am_eviacamloader_OBJECTS = eviacamloader.$(OBJEXT)
eviacamloader_OBJECTS = $(am_eviacamloader_OBJECTS)
eviacamloader_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(eviacam_SOURCES) $(eviacamloader_SOURCES)
DIST_SOURCES = $(eviacam_SOURCES) $(eviacamloader_SOURCES)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
DATA = $(desktop_DATA) $(dist_noinst_DATA) $(dist_pkgdata_DATA) \
	$(pixmap_DATA)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run autoconf
AUTOHEADER = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run autoheader
AUTOMAKE = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
COPYRIGHT = Â© 2008-13
CPP = gcc -E
CPPFLAGS = -Wall -fexceptions -Wconversion -I/usr/lib/x86_64-linux-gnu/wx/include/gtk2-unicode-release-2.8 -I/usr/include/wx-2.8 -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -D__WXGTK__ -I/usr/include/opencv   -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/freetype2 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/libpng12 -I/usr/include/harfbuzz   -DNDEBUG -O2
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -fexceptions -Wconversion -I/usr/lib/x86_64-linux-gnu/wx/include/gtk2-unicode-release-2.8 -I/usr/include/wx-2.8 -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -D__WXGTK__ -I/usr/include/opencv   -pthread -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/freetype2 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/libpng12 -I/usr/include/harfbuzz   -DNDEBUG -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GMSGFMT = /usr/bin/msgfmt
GMSGFMT_015 = /usr/bin/msgfmt
GREP = /bin/grep
GTK_LIBS = -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfontconfig -lgobject-2.0 -lglib-2.0 -lfreetype  
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTLLIBS = 
INTL_MACOSX_LIBS = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS =  -Wl,--as-needed
LIBICONV = -liconv
LIBINTL = 
LIBOBJS = 
LIBS = -lXtst -lXext -lX11 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBICONV = -liconv
LTLIBINTL = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MSGFMT = /usr/bin/msgfmt
MSGFMT_015 = /usr/bin/msgfmt
MSGMERGE = /usr/bin/msgmerge
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENCVVERSION =  2004008
OPENCV_LIBS = /usr/lib/x86_64-linux-gnu/libopencv_calib3d.so /usr/lib/x86_64-linux-gnu/libopencv_contrib.so /usr/lib/x86_64-linux-gnu/libopencv_core.so /usr/lib/x86_64-linux-gnu/libopencv_features2d.so /usr/lib/x86_64-linux-gnu/libopencv_flann.so /usr/lib/x86_64-linux-gnu/libopencv_gpu.so /usr/lib/x86_64-linux-gnu/libopencv_highgui.so /usr/lib/x86_64-linux-gnu/libopencv_imgproc.so /usr/lib/x86_64-linux-gnu/libopencv_legacy.so /usr/lib/x86_64-linux-gnu/libopencv_ml.so /usr/lib/x86_64-linux-gnu/libopencv_objdetect.so /usr/lib/x86_64-linux-gnu/libopencv_ocl.so /usr/lib/x86_64-linux-gnu/libopencv_photo.so /usr/lib/x86_64-linux-gnu/libopencv_stitching.so /usr/lib/x86_64-linux-gnu/libopencv_superres.so /usr/lib/x86_64-linux-gnu/libopencv_ts.so /usr/lib/x86_64-linux-gnu/libopencv_video.so /usr/lib/x86_64-linux-gnu/libopencv_videostab.so -lopencv_calib3d -lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann -lopencv_gpu -lopencv_highgui -lopencv_imgproc -lopencv_legacy -lopencv_ml -lopencv_objdetect -lopencv_ocl -lopencv_photo -lopencv_stitching -lopencv_superres -lopencv_ts -lopencv_video -lopencv_videostab  
OTOOL = 
OTOOL64 = 
PACKAGE = eviacam
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
POSUB = po
PUBLISHER = CÃ©sar Mauri Loba
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
USE_NLS = yes
VERSION = 1.7.0
VIDEODEV_INCLUDE_FILE = libv4l1-videodev.h
WX_LIBS = -L/usr/lib/x86_64-linux-gnu -pthread -Wl,-Bsymbolic-functions -Wl,-z,relro  -L/usr/lib/x86_64-linux-gnu   -lwx_gtk2u_richtext-2.8 -lwx_gtk2u_aui-2.8 -lwx_gtk2u_xrc-2.8 -lwx_gtk2u_qa-2.8 -lwx_gtk2u_html-2.8 -lwx_gtk2u_adv-2.8 -lwx_gtk2u_core-2.8 -lwx_baseu_xml-2.8 -lwx_baseu_net-2.8 -lwx_baseu-2.8 
XGETTEXT = /usr/bin/xgettext
XGETTEXT_015 = /usr/bin/xgettext
XMKMF = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /home/raman/RandD/opengazer/eviacam-1.7.0/src
abs_srcdir = /home/raman/RandD/opengazer/eviacam-1.7.0/src
abs_top_builddir = /home/raman/RandD/opengazer/eviacam-1.7.0
abs_top_srcdir = /home/raman/RandD/opengazer/eviacam-1.7.0
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/raman/RandD/opengazer/eviacam-1.7.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

# these are the headers for your project
noinst_HEADERS = wgetkey.h \
	cautostart.h \
	ckeyboardcode.h \
	clickwindow.h \
	clickwindowbitmap.h \
	clickwindowbitmapvertical.h \
	clickwindowcontroller.h \
	clickwindowtext.h \
	clickwindowvertical.h \
	cmotioncalibration.h \
	eviacamapp.h \
	langnames-utf8.h \
	visionpipeline.h \
	version.h \
	viacamcontroller.h \
	wabout.h \
	wconfiguration.h \
	wconfirmcalibration.h \
	wmotioncalibrationx.h \
	wmotioncalibrationy.h \
	wviacam.h \
	cvisualalert.h \
	wwizard.h \
	wwizardmanager.h \
	wcameradialog.h \
	eviacamdefs.h \
	hotkeymanager.h \
	dwellclick.h \
	gestureclick.h \
	pointeraction.h \
	mousecommand.h \
	paths.h \
	checkupdates.h \
	checkupdates_ui.h \
	website.h

dist_noinst_DATA = version.h.in \
	eviacamloader.c.in \
	gui.pjd \
	gui.rc \
	eviacam.vcproj \
	icons/on.xpm \
	icons/eviacam.ico \
	icons/clickwindowoff.xpm \
	icons/help.xpm \
	icons/preferences.xpm \
	icons/clickwindow.xpm \
	icons/keyboard.xpm \
	icons/user.xpm \
	icons/eviacam_gray_bg.xpm \
	icons/eviacam_mini.xpm \
	icons/eviacam_small.xpm \
	icons/off.xpm \
	icons/buttonDblLeftDisabled.xpm \
	icons/buttonDblLeftLocked.xpm \
	icons/buttonDblLeftSelectedLocked.xpm \
	icons/buttonDblLeftSelected.xpm \
	icons/buttonDblLeft.xpm \
	icons/buttonDragDisabled.xpm \
	icons/buttonDragLocked.xpm \
	icons/buttonDragSelectedLocked.xpm \
	icons/buttonDragSelected.xpm \
	icons/buttonDrag.xpm \
	icons/buttonHideMainWindow.xpm \
	icons/buttonLeftDisabled.xpm \
	icons/buttonLeftLocked.xpm \
	icons/buttonLeftSelectedLocked.xpm \
	icons/buttonLeftSelected.xpm \
	icons/buttonLeft.xpm \
	icons/buttonMiddleDisabled.xpm \
	icons/buttonMiddleLocked.xpm \
	icons/buttonMiddleSelectedLocked.xpm \
	icons/buttonMiddleSelected.xpm \
	icons/buttonMiddle.xpm \
	icons/buttonNoClickSelected.xpm \
	icons/buttonNoClick.xpm \
	icons/buttonRightDisabled.xpm \
	icons/buttonRightLocked.xpm \
	icons/buttonRightSelectedLocked.xpm \
	icons/buttonRightSelected.xpm \
	icons/buttonRight.xpm \
	icons/buttonShowMainWindow.xpm \
	icons/usermoveh64.xpm \
	icons/usermovev64.xpm

EXTRA_DIST = eviacam.desktop icons/eviacam.png
dist_pkgdata_DATA = eviacam.desktop data/haarcascade_frontalface_default.xml
desktopdir = $(datadir)/applications/
desktop_DATA = eviacam.desktop
pixmapdir = $(datadir)/pixmaps/
pixmap_DATA = icons/eviacam.png
eviacamloader_SOURCES = eviacamloader.c

# the application source, library search path, and link libraries
eviacam_SOURCES = wgetkey.cpp \
	cautostart.cpp \
	ckeyboardcode.cpp \
	clickwindow.cpp \
	clickwindowbitmap.cpp \
	clickwindowbitmapvertical.cpp \
	clickwindowcontroller.cpp \
	clickwindowtext.cpp \
	clickwindowvertical.cpp \
	cmotioncalibration.cpp \
	eviacamapp.cpp \
	visionpipeline.cpp \
	viacamcontroller.cpp \
	wabout.cpp \
	wconfiguration.cpp \
	wconfirmcalibration.cpp \
	wmotioncalibrationx.cpp \
	wmotioncalibrationy.cpp \
	wviacam.cpp \
	cvisualalert.cpp \
	wwizard.cpp \
	wwizardmanager.cpp \
	wcameradialog.cpp \
	hotkeymanager.cpp \
	dwellclick.cpp \
	gestureclick.cpp \
	pointeraction.cpp \
	paths.cpp \
	checkupdates.cpp \
	checkupdates_ui.cpp \
	website.cpp

eviacam_CPPFLAGS = -DLOCALEDIR=\"$(localedir)\" -DOPENCVVERSION=$(OPENCVVERSION)
eviacam_LDFLAGS = $(WX_LIBS) $(OPENCV_LIBS) -lXtst -lXext -lX11
INCLUDES = \
	-I$(top_srcdir)/creavision \
	-I$(top_srcdir)/simplelog \
	-I$(top_srcdir)/wxcamwindow \
	-I$(top_srcdir)/wxutil

eviacam_LDADD = \
	$(top_builddir)/wxutil/libwxutil.la \
	$(top_builddir)/simplelog/libsimplelog.la \
	$(top_builddir)/creavision/libcreavision.la \
	$(top_builddir)/creavision/libwebcam/libwebcam.la \
	$(top_builddir)/wxcamwindow/libwxcamwindow.la

all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
version.h: $(top_builddir)/config.status $(srcdir)/version.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
eviacamloader.c: $(top_builddir)/config.status $(srcdir)/eviacamloader.c.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
eviacam$(EXEEXT): $(eviacam_OBJECTS) $(eviacam_DEPENDENCIES) 
	@rm -f eviacam$(EXEEXT)
	$(eviacam_LINK) $(eviacam_OBJECTS) $(eviacam_LDADD) $(LIBS)
eviacamloader$(EXEEXT): $(eviacamloader_OBJECTS) $(eviacamloader_DEPENDENCIES) 
	@rm -f eviacamloader$(EXEEXT)
	$(LINK) $(eviacamloader_OBJECTS) $(eviacamloader_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/eviacam-cautostart.Po
include ./$(DEPDIR)/eviacam-checkupdates.Po
include ./$(DEPDIR)/eviacam-checkupdates_ui.Po
include ./$(DEPDIR)/eviacam-ckeyboardcode.Po
include ./$(DEPDIR)/eviacam-clickwindow.Po
include ./$(DEPDIR)/eviacam-clickwindowbitmap.Po
include ./$(DEPDIR)/eviacam-clickwindowbitmapvertical.Po
include ./$(DEPDIR)/eviacam-clickwindowcontroller.Po
include ./$(DEPDIR)/eviacam-clickwindowtext.Po
include ./$(DEPDIR)/eviacam-clickwindowvertical.Po
include ./$(DEPDIR)/eviacam-cmotioncalibration.Po
include ./$(DEPDIR)/eviacam-cvisualalert.Po
include ./$(DEPDIR)/eviacam-dwellclick.Po
include ./$(DEPDIR)/eviacam-eviacamapp.Po
include ./$(DEPDIR)/eviacam-gestureclick.Po
include ./$(DEPDIR)/eviacam-hotkeymanager.Po
include ./$(DEPDIR)/eviacam-paths.Po
include ./$(DEPDIR)/eviacam-pointeraction.Po
include ./$(DEPDIR)/eviacam-viacamcontroller.Po
include ./$(DEPDIR)/eviacam-visionpipeline.Po
include ./$(DEPDIR)/eviacam-wabout.Po
include ./$(DEPDIR)/eviacam-wcameradialog.Po
include ./$(DEPDIR)/eviacam-wconfiguration.Po
include ./$(DEPDIR)/eviacam-wconfirmcalibration.Po
include ./$(DEPDIR)/eviacam-website.Po
include ./$(DEPDIR)/eviacam-wgetkey.Po
include ./$(DEPDIR)/eviacam-wmotioncalibrationx.Po
include ./$(DEPDIR)/eviacam-wmotioncalibrationy.Po
include ./$(DEPDIR)/eviacam-wviacam.Po
include ./$(DEPDIR)/eviacam-wwizard.Po
include ./$(DEPDIR)/eviacam-wwizardmanager.Po
include ./$(DEPDIR)/eviacamloader.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

eviacam-wgetkey.o: wgetkey.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wgetkey.o -MD -MP -MF $(DEPDIR)/eviacam-wgetkey.Tpo -c -o eviacam-wgetkey.o `test -f 'wgetkey.cpp' || echo '$(srcdir)/'`wgetkey.cpp
	$(am__mv) $(DEPDIR)/eviacam-wgetkey.Tpo $(DEPDIR)/eviacam-wgetkey.Po
#	source='wgetkey.cpp' object='eviacam-wgetkey.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wgetkey.o `test -f 'wgetkey.cpp' || echo '$(srcdir)/'`wgetkey.cpp

eviacam-wgetkey.obj: wgetkey.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wgetkey.obj -MD -MP -MF $(DEPDIR)/eviacam-wgetkey.Tpo -c -o eviacam-wgetkey.obj `if test -f 'wgetkey.cpp'; then $(CYGPATH_W) 'wgetkey.cpp'; else $(CYGPATH_W) '$(srcdir)/wgetkey.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wgetkey.Tpo $(DEPDIR)/eviacam-wgetkey.Po
#	source='wgetkey.cpp' object='eviacam-wgetkey.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wgetkey.obj `if test -f 'wgetkey.cpp'; then $(CYGPATH_W) 'wgetkey.cpp'; else $(CYGPATH_W) '$(srcdir)/wgetkey.cpp'; fi`

eviacam-cautostart.o: cautostart.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cautostart.o -MD -MP -MF $(DEPDIR)/eviacam-cautostart.Tpo -c -o eviacam-cautostart.o `test -f 'cautostart.cpp' || echo '$(srcdir)/'`cautostart.cpp
	$(am__mv) $(DEPDIR)/eviacam-cautostart.Tpo $(DEPDIR)/eviacam-cautostart.Po
#	source='cautostart.cpp' object='eviacam-cautostart.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cautostart.o `test -f 'cautostart.cpp' || echo '$(srcdir)/'`cautostart.cpp

eviacam-cautostart.obj: cautostart.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cautostart.obj -MD -MP -MF $(DEPDIR)/eviacam-cautostart.Tpo -c -o eviacam-cautostart.obj `if test -f 'cautostart.cpp'; then $(CYGPATH_W) 'cautostart.cpp'; else $(CYGPATH_W) '$(srcdir)/cautostart.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-cautostart.Tpo $(DEPDIR)/eviacam-cautostart.Po
#	source='cautostart.cpp' object='eviacam-cautostart.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cautostart.obj `if test -f 'cautostart.cpp'; then $(CYGPATH_W) 'cautostart.cpp'; else $(CYGPATH_W) '$(srcdir)/cautostart.cpp'; fi`

eviacam-ckeyboardcode.o: ckeyboardcode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-ckeyboardcode.o -MD -MP -MF $(DEPDIR)/eviacam-ckeyboardcode.Tpo -c -o eviacam-ckeyboardcode.o `test -f 'ckeyboardcode.cpp' || echo '$(srcdir)/'`ckeyboardcode.cpp
	$(am__mv) $(DEPDIR)/eviacam-ckeyboardcode.Tpo $(DEPDIR)/eviacam-ckeyboardcode.Po
#	source='ckeyboardcode.cpp' object='eviacam-ckeyboardcode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-ckeyboardcode.o `test -f 'ckeyboardcode.cpp' || echo '$(srcdir)/'`ckeyboardcode.cpp

eviacam-ckeyboardcode.obj: ckeyboardcode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-ckeyboardcode.obj -MD -MP -MF $(DEPDIR)/eviacam-ckeyboardcode.Tpo -c -o eviacam-ckeyboardcode.obj `if test -f 'ckeyboardcode.cpp'; then $(CYGPATH_W) 'ckeyboardcode.cpp'; else $(CYGPATH_W) '$(srcdir)/ckeyboardcode.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-ckeyboardcode.Tpo $(DEPDIR)/eviacam-ckeyboardcode.Po
#	source='ckeyboardcode.cpp' object='eviacam-ckeyboardcode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-ckeyboardcode.obj `if test -f 'ckeyboardcode.cpp'; then $(CYGPATH_W) 'ckeyboardcode.cpp'; else $(CYGPATH_W) '$(srcdir)/ckeyboardcode.cpp'; fi`

eviacam-clickwindow.o: clickwindow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindow.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindow.Tpo -c -o eviacam-clickwindow.o `test -f 'clickwindow.cpp' || echo '$(srcdir)/'`clickwindow.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindow.Tpo $(DEPDIR)/eviacam-clickwindow.Po
#	source='clickwindow.cpp' object='eviacam-clickwindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindow.o `test -f 'clickwindow.cpp' || echo '$(srcdir)/'`clickwindow.cpp

eviacam-clickwindow.obj: clickwindow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindow.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindow.Tpo -c -o eviacam-clickwindow.obj `if test -f 'clickwindow.cpp'; then $(CYGPATH_W) 'clickwindow.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindow.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindow.Tpo $(DEPDIR)/eviacam-clickwindow.Po
#	source='clickwindow.cpp' object='eviacam-clickwindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindow.obj `if test -f 'clickwindow.cpp'; then $(CYGPATH_W) 'clickwindow.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindow.cpp'; fi`

eviacam-clickwindowbitmap.o: clickwindowbitmap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowbitmap.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindowbitmap.Tpo -c -o eviacam-clickwindowbitmap.o `test -f 'clickwindowbitmap.cpp' || echo '$(srcdir)/'`clickwindowbitmap.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindowbitmap.Tpo $(DEPDIR)/eviacam-clickwindowbitmap.Po
#	source='clickwindowbitmap.cpp' object='eviacam-clickwindowbitmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowbitmap.o `test -f 'clickwindowbitmap.cpp' || echo '$(srcdir)/'`clickwindowbitmap.cpp

eviacam-clickwindowbitmap.obj: clickwindowbitmap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowbitmap.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindowbitmap.Tpo -c -o eviacam-clickwindowbitmap.obj `if test -f 'clickwindowbitmap.cpp'; then $(CYGPATH_W) 'clickwindowbitmap.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowbitmap.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindowbitmap.Tpo $(DEPDIR)/eviacam-clickwindowbitmap.Po
#	source='clickwindowbitmap.cpp' object='eviacam-clickwindowbitmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowbitmap.obj `if test -f 'clickwindowbitmap.cpp'; then $(CYGPATH_W) 'clickwindowbitmap.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowbitmap.cpp'; fi`

eviacam-clickwindowbitmapvertical.o: clickwindowbitmapvertical.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowbitmapvertical.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindowbitmapvertical.Tpo -c -o eviacam-clickwindowbitmapvertical.o `test -f 'clickwindowbitmapvertical.cpp' || echo '$(srcdir)/'`clickwindowbitmapvertical.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindowbitmapvertical.Tpo $(DEPDIR)/eviacam-clickwindowbitmapvertical.Po
#	source='clickwindowbitmapvertical.cpp' object='eviacam-clickwindowbitmapvertical.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowbitmapvertical.o `test -f 'clickwindowbitmapvertical.cpp' || echo '$(srcdir)/'`clickwindowbitmapvertical.cpp

eviacam-clickwindowbitmapvertical.obj: clickwindowbitmapvertical.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowbitmapvertical.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindowbitmapvertical.Tpo -c -o eviacam-clickwindowbitmapvertical.obj `if test -f 'clickwindowbitmapvertical.cpp'; then $(CYGPATH_W) 'clickwindowbitmapvertical.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowbitmapvertical.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindowbitmapvertical.Tpo $(DEPDIR)/eviacam-clickwindowbitmapvertical.Po
#	source='clickwindowbitmapvertical.cpp' object='eviacam-clickwindowbitmapvertical.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowbitmapvertical.obj `if test -f 'clickwindowbitmapvertical.cpp'; then $(CYGPATH_W) 'clickwindowbitmapvertical.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowbitmapvertical.cpp'; fi`

eviacam-clickwindowcontroller.o: clickwindowcontroller.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowcontroller.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindowcontroller.Tpo -c -o eviacam-clickwindowcontroller.o `test -f 'clickwindowcontroller.cpp' || echo '$(srcdir)/'`clickwindowcontroller.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindowcontroller.Tpo $(DEPDIR)/eviacam-clickwindowcontroller.Po
#	source='clickwindowcontroller.cpp' object='eviacam-clickwindowcontroller.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowcontroller.o `test -f 'clickwindowcontroller.cpp' || echo '$(srcdir)/'`clickwindowcontroller.cpp

eviacam-clickwindowcontroller.obj: clickwindowcontroller.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowcontroller.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindowcontroller.Tpo -c -o eviacam-clickwindowcontroller.obj `if test -f 'clickwindowcontroller.cpp'; then $(CYGPATH_W) 'clickwindowcontroller.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowcontroller.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindowcontroller.Tpo $(DEPDIR)/eviacam-clickwindowcontroller.Po
#	source='clickwindowcontroller.cpp' object='eviacam-clickwindowcontroller.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowcontroller.obj `if test -f 'clickwindowcontroller.cpp'; then $(CYGPATH_W) 'clickwindowcontroller.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowcontroller.cpp'; fi`

eviacam-clickwindowtext.o: clickwindowtext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowtext.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindowtext.Tpo -c -o eviacam-clickwindowtext.o `test -f 'clickwindowtext.cpp' || echo '$(srcdir)/'`clickwindowtext.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindowtext.Tpo $(DEPDIR)/eviacam-clickwindowtext.Po
#	source='clickwindowtext.cpp' object='eviacam-clickwindowtext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowtext.o `test -f 'clickwindowtext.cpp' || echo '$(srcdir)/'`clickwindowtext.cpp

eviacam-clickwindowtext.obj: clickwindowtext.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowtext.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindowtext.Tpo -c -o eviacam-clickwindowtext.obj `if test -f 'clickwindowtext.cpp'; then $(CYGPATH_W) 'clickwindowtext.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowtext.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindowtext.Tpo $(DEPDIR)/eviacam-clickwindowtext.Po
#	source='clickwindowtext.cpp' object='eviacam-clickwindowtext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowtext.obj `if test -f 'clickwindowtext.cpp'; then $(CYGPATH_W) 'clickwindowtext.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowtext.cpp'; fi`

eviacam-clickwindowvertical.o: clickwindowvertical.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowvertical.o -MD -MP -MF $(DEPDIR)/eviacam-clickwindowvertical.Tpo -c -o eviacam-clickwindowvertical.o `test -f 'clickwindowvertical.cpp' || echo '$(srcdir)/'`clickwindowvertical.cpp
	$(am__mv) $(DEPDIR)/eviacam-clickwindowvertical.Tpo $(DEPDIR)/eviacam-clickwindowvertical.Po
#	source='clickwindowvertical.cpp' object='eviacam-clickwindowvertical.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowvertical.o `test -f 'clickwindowvertical.cpp' || echo '$(srcdir)/'`clickwindowvertical.cpp

eviacam-clickwindowvertical.obj: clickwindowvertical.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-clickwindowvertical.obj -MD -MP -MF $(DEPDIR)/eviacam-clickwindowvertical.Tpo -c -o eviacam-clickwindowvertical.obj `if test -f 'clickwindowvertical.cpp'; then $(CYGPATH_W) 'clickwindowvertical.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowvertical.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-clickwindowvertical.Tpo $(DEPDIR)/eviacam-clickwindowvertical.Po
#	source='clickwindowvertical.cpp' object='eviacam-clickwindowvertical.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-clickwindowvertical.obj `if test -f 'clickwindowvertical.cpp'; then $(CYGPATH_W) 'clickwindowvertical.cpp'; else $(CYGPATH_W) '$(srcdir)/clickwindowvertical.cpp'; fi`

eviacam-cmotioncalibration.o: cmotioncalibration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cmotioncalibration.o -MD -MP -MF $(DEPDIR)/eviacam-cmotioncalibration.Tpo -c -o eviacam-cmotioncalibration.o `test -f 'cmotioncalibration.cpp' || echo '$(srcdir)/'`cmotioncalibration.cpp
	$(am__mv) $(DEPDIR)/eviacam-cmotioncalibration.Tpo $(DEPDIR)/eviacam-cmotioncalibration.Po
#	source='cmotioncalibration.cpp' object='eviacam-cmotioncalibration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cmotioncalibration.o `test -f 'cmotioncalibration.cpp' || echo '$(srcdir)/'`cmotioncalibration.cpp

eviacam-cmotioncalibration.obj: cmotioncalibration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cmotioncalibration.obj -MD -MP -MF $(DEPDIR)/eviacam-cmotioncalibration.Tpo -c -o eviacam-cmotioncalibration.obj `if test -f 'cmotioncalibration.cpp'; then $(CYGPATH_W) 'cmotioncalibration.cpp'; else $(CYGPATH_W) '$(srcdir)/cmotioncalibration.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-cmotioncalibration.Tpo $(DEPDIR)/eviacam-cmotioncalibration.Po
#	source='cmotioncalibration.cpp' object='eviacam-cmotioncalibration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cmotioncalibration.obj `if test -f 'cmotioncalibration.cpp'; then $(CYGPATH_W) 'cmotioncalibration.cpp'; else $(CYGPATH_W) '$(srcdir)/cmotioncalibration.cpp'; fi`

eviacam-eviacamapp.o: eviacamapp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-eviacamapp.o -MD -MP -MF $(DEPDIR)/eviacam-eviacamapp.Tpo -c -o eviacam-eviacamapp.o `test -f 'eviacamapp.cpp' || echo '$(srcdir)/'`eviacamapp.cpp
	$(am__mv) $(DEPDIR)/eviacam-eviacamapp.Tpo $(DEPDIR)/eviacam-eviacamapp.Po
#	source='eviacamapp.cpp' object='eviacam-eviacamapp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-eviacamapp.o `test -f 'eviacamapp.cpp' || echo '$(srcdir)/'`eviacamapp.cpp

eviacam-eviacamapp.obj: eviacamapp.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-eviacamapp.obj -MD -MP -MF $(DEPDIR)/eviacam-eviacamapp.Tpo -c -o eviacam-eviacamapp.obj `if test -f 'eviacamapp.cpp'; then $(CYGPATH_W) 'eviacamapp.cpp'; else $(CYGPATH_W) '$(srcdir)/eviacamapp.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-eviacamapp.Tpo $(DEPDIR)/eviacam-eviacamapp.Po
#	source='eviacamapp.cpp' object='eviacam-eviacamapp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-eviacamapp.obj `if test -f 'eviacamapp.cpp'; then $(CYGPATH_W) 'eviacamapp.cpp'; else $(CYGPATH_W) '$(srcdir)/eviacamapp.cpp'; fi`

eviacam-visionpipeline.o: visionpipeline.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-visionpipeline.o -MD -MP -MF $(DEPDIR)/eviacam-visionpipeline.Tpo -c -o eviacam-visionpipeline.o `test -f 'visionpipeline.cpp' || echo '$(srcdir)/'`visionpipeline.cpp
	$(am__mv) $(DEPDIR)/eviacam-visionpipeline.Tpo $(DEPDIR)/eviacam-visionpipeline.Po
#	source='visionpipeline.cpp' object='eviacam-visionpipeline.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-visionpipeline.o `test -f 'visionpipeline.cpp' || echo '$(srcdir)/'`visionpipeline.cpp

eviacam-visionpipeline.obj: visionpipeline.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-visionpipeline.obj -MD -MP -MF $(DEPDIR)/eviacam-visionpipeline.Tpo -c -o eviacam-visionpipeline.obj `if test -f 'visionpipeline.cpp'; then $(CYGPATH_W) 'visionpipeline.cpp'; else $(CYGPATH_W) '$(srcdir)/visionpipeline.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-visionpipeline.Tpo $(DEPDIR)/eviacam-visionpipeline.Po
#	source='visionpipeline.cpp' object='eviacam-visionpipeline.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-visionpipeline.obj `if test -f 'visionpipeline.cpp'; then $(CYGPATH_W) 'visionpipeline.cpp'; else $(CYGPATH_W) '$(srcdir)/visionpipeline.cpp'; fi`

eviacam-viacamcontroller.o: viacamcontroller.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-viacamcontroller.o -MD -MP -MF $(DEPDIR)/eviacam-viacamcontroller.Tpo -c -o eviacam-viacamcontroller.o `test -f 'viacamcontroller.cpp' || echo '$(srcdir)/'`viacamcontroller.cpp
	$(am__mv) $(DEPDIR)/eviacam-viacamcontroller.Tpo $(DEPDIR)/eviacam-viacamcontroller.Po
#	source='viacamcontroller.cpp' object='eviacam-viacamcontroller.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-viacamcontroller.o `test -f 'viacamcontroller.cpp' || echo '$(srcdir)/'`viacamcontroller.cpp

eviacam-viacamcontroller.obj: viacamcontroller.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-viacamcontroller.obj -MD -MP -MF $(DEPDIR)/eviacam-viacamcontroller.Tpo -c -o eviacam-viacamcontroller.obj `if test -f 'viacamcontroller.cpp'; then $(CYGPATH_W) 'viacamcontroller.cpp'; else $(CYGPATH_W) '$(srcdir)/viacamcontroller.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-viacamcontroller.Tpo $(DEPDIR)/eviacam-viacamcontroller.Po
#	source='viacamcontroller.cpp' object='eviacam-viacamcontroller.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-viacamcontroller.obj `if test -f 'viacamcontroller.cpp'; then $(CYGPATH_W) 'viacamcontroller.cpp'; else $(CYGPATH_W) '$(srcdir)/viacamcontroller.cpp'; fi`

eviacam-wabout.o: wabout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wabout.o -MD -MP -MF $(DEPDIR)/eviacam-wabout.Tpo -c -o eviacam-wabout.o `test -f 'wabout.cpp' || echo '$(srcdir)/'`wabout.cpp
	$(am__mv) $(DEPDIR)/eviacam-wabout.Tpo $(DEPDIR)/eviacam-wabout.Po
#	source='wabout.cpp' object='eviacam-wabout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wabout.o `test -f 'wabout.cpp' || echo '$(srcdir)/'`wabout.cpp

eviacam-wabout.obj: wabout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wabout.obj -MD -MP -MF $(DEPDIR)/eviacam-wabout.Tpo -c -o eviacam-wabout.obj `if test -f 'wabout.cpp'; then $(CYGPATH_W) 'wabout.cpp'; else $(CYGPATH_W) '$(srcdir)/wabout.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wabout.Tpo $(DEPDIR)/eviacam-wabout.Po
#	source='wabout.cpp' object='eviacam-wabout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wabout.obj `if test -f 'wabout.cpp'; then $(CYGPATH_W) 'wabout.cpp'; else $(CYGPATH_W) '$(srcdir)/wabout.cpp'; fi`

eviacam-wconfiguration.o: wconfiguration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wconfiguration.o -MD -MP -MF $(DEPDIR)/eviacam-wconfiguration.Tpo -c -o eviacam-wconfiguration.o `test -f 'wconfiguration.cpp' || echo '$(srcdir)/'`wconfiguration.cpp
	$(am__mv) $(DEPDIR)/eviacam-wconfiguration.Tpo $(DEPDIR)/eviacam-wconfiguration.Po
#	source='wconfiguration.cpp' object='eviacam-wconfiguration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wconfiguration.o `test -f 'wconfiguration.cpp' || echo '$(srcdir)/'`wconfiguration.cpp

eviacam-wconfiguration.obj: wconfiguration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wconfiguration.obj -MD -MP -MF $(DEPDIR)/eviacam-wconfiguration.Tpo -c -o eviacam-wconfiguration.obj `if test -f 'wconfiguration.cpp'; then $(CYGPATH_W) 'wconfiguration.cpp'; else $(CYGPATH_W) '$(srcdir)/wconfiguration.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wconfiguration.Tpo $(DEPDIR)/eviacam-wconfiguration.Po
#	source='wconfiguration.cpp' object='eviacam-wconfiguration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wconfiguration.obj `if test -f 'wconfiguration.cpp'; then $(CYGPATH_W) 'wconfiguration.cpp'; else $(CYGPATH_W) '$(srcdir)/wconfiguration.cpp'; fi`

eviacam-wconfirmcalibration.o: wconfirmcalibration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wconfirmcalibration.o -MD -MP -MF $(DEPDIR)/eviacam-wconfirmcalibration.Tpo -c -o eviacam-wconfirmcalibration.o `test -f 'wconfirmcalibration.cpp' || echo '$(srcdir)/'`wconfirmcalibration.cpp
	$(am__mv) $(DEPDIR)/eviacam-wconfirmcalibration.Tpo $(DEPDIR)/eviacam-wconfirmcalibration.Po
#	source='wconfirmcalibration.cpp' object='eviacam-wconfirmcalibration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wconfirmcalibration.o `test -f 'wconfirmcalibration.cpp' || echo '$(srcdir)/'`wconfirmcalibration.cpp

eviacam-wconfirmcalibration.obj: wconfirmcalibration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wconfirmcalibration.obj -MD -MP -MF $(DEPDIR)/eviacam-wconfirmcalibration.Tpo -c -o eviacam-wconfirmcalibration.obj `if test -f 'wconfirmcalibration.cpp'; then $(CYGPATH_W) 'wconfirmcalibration.cpp'; else $(CYGPATH_W) '$(srcdir)/wconfirmcalibration.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wconfirmcalibration.Tpo $(DEPDIR)/eviacam-wconfirmcalibration.Po
#	source='wconfirmcalibration.cpp' object='eviacam-wconfirmcalibration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wconfirmcalibration.obj `if test -f 'wconfirmcalibration.cpp'; then $(CYGPATH_W) 'wconfirmcalibration.cpp'; else $(CYGPATH_W) '$(srcdir)/wconfirmcalibration.cpp'; fi`

eviacam-wmotioncalibrationx.o: wmotioncalibrationx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wmotioncalibrationx.o -MD -MP -MF $(DEPDIR)/eviacam-wmotioncalibrationx.Tpo -c -o eviacam-wmotioncalibrationx.o `test -f 'wmotioncalibrationx.cpp' || echo '$(srcdir)/'`wmotioncalibrationx.cpp
	$(am__mv) $(DEPDIR)/eviacam-wmotioncalibrationx.Tpo $(DEPDIR)/eviacam-wmotioncalibrationx.Po
#	source='wmotioncalibrationx.cpp' object='eviacam-wmotioncalibrationx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wmotioncalibrationx.o `test -f 'wmotioncalibrationx.cpp' || echo '$(srcdir)/'`wmotioncalibrationx.cpp

eviacam-wmotioncalibrationx.obj: wmotioncalibrationx.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wmotioncalibrationx.obj -MD -MP -MF $(DEPDIR)/eviacam-wmotioncalibrationx.Tpo -c -o eviacam-wmotioncalibrationx.obj `if test -f 'wmotioncalibrationx.cpp'; then $(CYGPATH_W) 'wmotioncalibrationx.cpp'; else $(CYGPATH_W) '$(srcdir)/wmotioncalibrationx.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wmotioncalibrationx.Tpo $(DEPDIR)/eviacam-wmotioncalibrationx.Po
#	source='wmotioncalibrationx.cpp' object='eviacam-wmotioncalibrationx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wmotioncalibrationx.obj `if test -f 'wmotioncalibrationx.cpp'; then $(CYGPATH_W) 'wmotioncalibrationx.cpp'; else $(CYGPATH_W) '$(srcdir)/wmotioncalibrationx.cpp'; fi`

eviacam-wmotioncalibrationy.o: wmotioncalibrationy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wmotioncalibrationy.o -MD -MP -MF $(DEPDIR)/eviacam-wmotioncalibrationy.Tpo -c -o eviacam-wmotioncalibrationy.o `test -f 'wmotioncalibrationy.cpp' || echo '$(srcdir)/'`wmotioncalibrationy.cpp
	$(am__mv) $(DEPDIR)/eviacam-wmotioncalibrationy.Tpo $(DEPDIR)/eviacam-wmotioncalibrationy.Po
#	source='wmotioncalibrationy.cpp' object='eviacam-wmotioncalibrationy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wmotioncalibrationy.o `test -f 'wmotioncalibrationy.cpp' || echo '$(srcdir)/'`wmotioncalibrationy.cpp

eviacam-wmotioncalibrationy.obj: wmotioncalibrationy.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wmotioncalibrationy.obj -MD -MP -MF $(DEPDIR)/eviacam-wmotioncalibrationy.Tpo -c -o eviacam-wmotioncalibrationy.obj `if test -f 'wmotioncalibrationy.cpp'; then $(CYGPATH_W) 'wmotioncalibrationy.cpp'; else $(CYGPATH_W) '$(srcdir)/wmotioncalibrationy.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wmotioncalibrationy.Tpo $(DEPDIR)/eviacam-wmotioncalibrationy.Po
#	source='wmotioncalibrationy.cpp' object='eviacam-wmotioncalibrationy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wmotioncalibrationy.obj `if test -f 'wmotioncalibrationy.cpp'; then $(CYGPATH_W) 'wmotioncalibrationy.cpp'; else $(CYGPATH_W) '$(srcdir)/wmotioncalibrationy.cpp'; fi`

eviacam-wviacam.o: wviacam.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wviacam.o -MD -MP -MF $(DEPDIR)/eviacam-wviacam.Tpo -c -o eviacam-wviacam.o `test -f 'wviacam.cpp' || echo '$(srcdir)/'`wviacam.cpp
	$(am__mv) $(DEPDIR)/eviacam-wviacam.Tpo $(DEPDIR)/eviacam-wviacam.Po
#	source='wviacam.cpp' object='eviacam-wviacam.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wviacam.o `test -f 'wviacam.cpp' || echo '$(srcdir)/'`wviacam.cpp

eviacam-wviacam.obj: wviacam.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wviacam.obj -MD -MP -MF $(DEPDIR)/eviacam-wviacam.Tpo -c -o eviacam-wviacam.obj `if test -f 'wviacam.cpp'; then $(CYGPATH_W) 'wviacam.cpp'; else $(CYGPATH_W) '$(srcdir)/wviacam.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wviacam.Tpo $(DEPDIR)/eviacam-wviacam.Po
#	source='wviacam.cpp' object='eviacam-wviacam.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wviacam.obj `if test -f 'wviacam.cpp'; then $(CYGPATH_W) 'wviacam.cpp'; else $(CYGPATH_W) '$(srcdir)/wviacam.cpp'; fi`

eviacam-cvisualalert.o: cvisualalert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cvisualalert.o -MD -MP -MF $(DEPDIR)/eviacam-cvisualalert.Tpo -c -o eviacam-cvisualalert.o `test -f 'cvisualalert.cpp' || echo '$(srcdir)/'`cvisualalert.cpp
	$(am__mv) $(DEPDIR)/eviacam-cvisualalert.Tpo $(DEPDIR)/eviacam-cvisualalert.Po
#	source='cvisualalert.cpp' object='eviacam-cvisualalert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cvisualalert.o `test -f 'cvisualalert.cpp' || echo '$(srcdir)/'`cvisualalert.cpp

eviacam-cvisualalert.obj: cvisualalert.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-cvisualalert.obj -MD -MP -MF $(DEPDIR)/eviacam-cvisualalert.Tpo -c -o eviacam-cvisualalert.obj `if test -f 'cvisualalert.cpp'; then $(CYGPATH_W) 'cvisualalert.cpp'; else $(CYGPATH_W) '$(srcdir)/cvisualalert.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-cvisualalert.Tpo $(DEPDIR)/eviacam-cvisualalert.Po
#	source='cvisualalert.cpp' object='eviacam-cvisualalert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-cvisualalert.obj `if test -f 'cvisualalert.cpp'; then $(CYGPATH_W) 'cvisualalert.cpp'; else $(CYGPATH_W) '$(srcdir)/cvisualalert.cpp'; fi`

eviacam-wwizard.o: wwizard.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wwizard.o -MD -MP -MF $(DEPDIR)/eviacam-wwizard.Tpo -c -o eviacam-wwizard.o `test -f 'wwizard.cpp' || echo '$(srcdir)/'`wwizard.cpp
	$(am__mv) $(DEPDIR)/eviacam-wwizard.Tpo $(DEPDIR)/eviacam-wwizard.Po
#	source='wwizard.cpp' object='eviacam-wwizard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wwizard.o `test -f 'wwizard.cpp' || echo '$(srcdir)/'`wwizard.cpp

eviacam-wwizard.obj: wwizard.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wwizard.obj -MD -MP -MF $(DEPDIR)/eviacam-wwizard.Tpo -c -o eviacam-wwizard.obj `if test -f 'wwizard.cpp'; then $(CYGPATH_W) 'wwizard.cpp'; else $(CYGPATH_W) '$(srcdir)/wwizard.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wwizard.Tpo $(DEPDIR)/eviacam-wwizard.Po
#	source='wwizard.cpp' object='eviacam-wwizard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wwizard.obj `if test -f 'wwizard.cpp'; then $(CYGPATH_W) 'wwizard.cpp'; else $(CYGPATH_W) '$(srcdir)/wwizard.cpp'; fi`

eviacam-wwizardmanager.o: wwizardmanager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wwizardmanager.o -MD -MP -MF $(DEPDIR)/eviacam-wwizardmanager.Tpo -c -o eviacam-wwizardmanager.o `test -f 'wwizardmanager.cpp' || echo '$(srcdir)/'`wwizardmanager.cpp
	$(am__mv) $(DEPDIR)/eviacam-wwizardmanager.Tpo $(DEPDIR)/eviacam-wwizardmanager.Po
#	source='wwizardmanager.cpp' object='eviacam-wwizardmanager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wwizardmanager.o `test -f 'wwizardmanager.cpp' || echo '$(srcdir)/'`wwizardmanager.cpp

eviacam-wwizardmanager.obj: wwizardmanager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wwizardmanager.obj -MD -MP -MF $(DEPDIR)/eviacam-wwizardmanager.Tpo -c -o eviacam-wwizardmanager.obj `if test -f 'wwizardmanager.cpp'; then $(CYGPATH_W) 'wwizardmanager.cpp'; else $(CYGPATH_W) '$(srcdir)/wwizardmanager.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wwizardmanager.Tpo $(DEPDIR)/eviacam-wwizardmanager.Po
#	source='wwizardmanager.cpp' object='eviacam-wwizardmanager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wwizardmanager.obj `if test -f 'wwizardmanager.cpp'; then $(CYGPATH_W) 'wwizardmanager.cpp'; else $(CYGPATH_W) '$(srcdir)/wwizardmanager.cpp'; fi`

eviacam-wcameradialog.o: wcameradialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wcameradialog.o -MD -MP -MF $(DEPDIR)/eviacam-wcameradialog.Tpo -c -o eviacam-wcameradialog.o `test -f 'wcameradialog.cpp' || echo '$(srcdir)/'`wcameradialog.cpp
	$(am__mv) $(DEPDIR)/eviacam-wcameradialog.Tpo $(DEPDIR)/eviacam-wcameradialog.Po
#	source='wcameradialog.cpp' object='eviacam-wcameradialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wcameradialog.o `test -f 'wcameradialog.cpp' || echo '$(srcdir)/'`wcameradialog.cpp

eviacam-wcameradialog.obj: wcameradialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-wcameradialog.obj -MD -MP -MF $(DEPDIR)/eviacam-wcameradialog.Tpo -c -o eviacam-wcameradialog.obj `if test -f 'wcameradialog.cpp'; then $(CYGPATH_W) 'wcameradialog.cpp'; else $(CYGPATH_W) '$(srcdir)/wcameradialog.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-wcameradialog.Tpo $(DEPDIR)/eviacam-wcameradialog.Po
#	source='wcameradialog.cpp' object='eviacam-wcameradialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-wcameradialog.obj `if test -f 'wcameradialog.cpp'; then $(CYGPATH_W) 'wcameradialog.cpp'; else $(CYGPATH_W) '$(srcdir)/wcameradialog.cpp'; fi`

eviacam-hotkeymanager.o: hotkeymanager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-hotkeymanager.o -MD -MP -MF $(DEPDIR)/eviacam-hotkeymanager.Tpo -c -o eviacam-hotkeymanager.o `test -f 'hotkeymanager.cpp' || echo '$(srcdir)/'`hotkeymanager.cpp
	$(am__mv) $(DEPDIR)/eviacam-hotkeymanager.Tpo $(DEPDIR)/eviacam-hotkeymanager.Po
#	source='hotkeymanager.cpp' object='eviacam-hotkeymanager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-hotkeymanager.o `test -f 'hotkeymanager.cpp' || echo '$(srcdir)/'`hotkeymanager.cpp

eviacam-hotkeymanager.obj: hotkeymanager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-hotkeymanager.obj -MD -MP -MF $(DEPDIR)/eviacam-hotkeymanager.Tpo -c -o eviacam-hotkeymanager.obj `if test -f 'hotkeymanager.cpp'; then $(CYGPATH_W) 'hotkeymanager.cpp'; else $(CYGPATH_W) '$(srcdir)/hotkeymanager.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-hotkeymanager.Tpo $(DEPDIR)/eviacam-hotkeymanager.Po
#	source='hotkeymanager.cpp' object='eviacam-hotkeymanager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-hotkeymanager.obj `if test -f 'hotkeymanager.cpp'; then $(CYGPATH_W) 'hotkeymanager.cpp'; else $(CYGPATH_W) '$(srcdir)/hotkeymanager.cpp'; fi`

eviacam-dwellclick.o: dwellclick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-dwellclick.o -MD -MP -MF $(DEPDIR)/eviacam-dwellclick.Tpo -c -o eviacam-dwellclick.o `test -f 'dwellclick.cpp' || echo '$(srcdir)/'`dwellclick.cpp
	$(am__mv) $(DEPDIR)/eviacam-dwellclick.Tpo $(DEPDIR)/eviacam-dwellclick.Po
#	source='dwellclick.cpp' object='eviacam-dwellclick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-dwellclick.o `test -f 'dwellclick.cpp' || echo '$(srcdir)/'`dwellclick.cpp

eviacam-dwellclick.obj: dwellclick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-dwellclick.obj -MD -MP -MF $(DEPDIR)/eviacam-dwellclick.Tpo -c -o eviacam-dwellclick.obj `if test -f 'dwellclick.cpp'; then $(CYGPATH_W) 'dwellclick.cpp'; else $(CYGPATH_W) '$(srcdir)/dwellclick.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-dwellclick.Tpo $(DEPDIR)/eviacam-dwellclick.Po
#	source='dwellclick.cpp' object='eviacam-dwellclick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-dwellclick.obj `if test -f 'dwellclick.cpp'; then $(CYGPATH_W) 'dwellclick.cpp'; else $(CYGPATH_W) '$(srcdir)/dwellclick.cpp'; fi`

eviacam-gestureclick.o: gestureclick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-gestureclick.o -MD -MP -MF $(DEPDIR)/eviacam-gestureclick.Tpo -c -o eviacam-gestureclick.o `test -f 'gestureclick.cpp' || echo '$(srcdir)/'`gestureclick.cpp
	$(am__mv) $(DEPDIR)/eviacam-gestureclick.Tpo $(DEPDIR)/eviacam-gestureclick.Po
#	source='gestureclick.cpp' object='eviacam-gestureclick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-gestureclick.o `test -f 'gestureclick.cpp' || echo '$(srcdir)/'`gestureclick.cpp

eviacam-gestureclick.obj: gestureclick.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-gestureclick.obj -MD -MP -MF $(DEPDIR)/eviacam-gestureclick.Tpo -c -o eviacam-gestureclick.obj `if test -f 'gestureclick.cpp'; then $(CYGPATH_W) 'gestureclick.cpp'; else $(CYGPATH_W) '$(srcdir)/gestureclick.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-gestureclick.Tpo $(DEPDIR)/eviacam-gestureclick.Po
#	source='gestureclick.cpp' object='eviacam-gestureclick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-gestureclick.obj `if test -f 'gestureclick.cpp'; then $(CYGPATH_W) 'gestureclick.cpp'; else $(CYGPATH_W) '$(srcdir)/gestureclick.cpp'; fi`

eviacam-pointeraction.o: pointeraction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-pointeraction.o -MD -MP -MF $(DEPDIR)/eviacam-pointeraction.Tpo -c -o eviacam-pointeraction.o `test -f 'pointeraction.cpp' || echo '$(srcdir)/'`pointeraction.cpp
	$(am__mv) $(DEPDIR)/eviacam-pointeraction.Tpo $(DEPDIR)/eviacam-pointeraction.Po
#	source='pointeraction.cpp' object='eviacam-pointeraction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-pointeraction.o `test -f 'pointeraction.cpp' || echo '$(srcdir)/'`pointeraction.cpp

eviacam-pointeraction.obj: pointeraction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-pointeraction.obj -MD -MP -MF $(DEPDIR)/eviacam-pointeraction.Tpo -c -o eviacam-pointeraction.obj `if test -f 'pointeraction.cpp'; then $(CYGPATH_W) 'pointeraction.cpp'; else $(CYGPATH_W) '$(srcdir)/pointeraction.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-pointeraction.Tpo $(DEPDIR)/eviacam-pointeraction.Po
#	source='pointeraction.cpp' object='eviacam-pointeraction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-pointeraction.obj `if test -f 'pointeraction.cpp'; then $(CYGPATH_W) 'pointeraction.cpp'; else $(CYGPATH_W) '$(srcdir)/pointeraction.cpp'; fi`

eviacam-paths.o: paths.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-paths.o -MD -MP -MF $(DEPDIR)/eviacam-paths.Tpo -c -o eviacam-paths.o `test -f 'paths.cpp' || echo '$(srcdir)/'`paths.cpp
	$(am__mv) $(DEPDIR)/eviacam-paths.Tpo $(DEPDIR)/eviacam-paths.Po
#	source='paths.cpp' object='eviacam-paths.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-paths.o `test -f 'paths.cpp' || echo '$(srcdir)/'`paths.cpp

eviacam-paths.obj: paths.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-paths.obj -MD -MP -MF $(DEPDIR)/eviacam-paths.Tpo -c -o eviacam-paths.obj `if test -f 'paths.cpp'; then $(CYGPATH_W) 'paths.cpp'; else $(CYGPATH_W) '$(srcdir)/paths.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-paths.Tpo $(DEPDIR)/eviacam-paths.Po
#	source='paths.cpp' object='eviacam-paths.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-paths.obj `if test -f 'paths.cpp'; then $(CYGPATH_W) 'paths.cpp'; else $(CYGPATH_W) '$(srcdir)/paths.cpp'; fi`

eviacam-checkupdates.o: checkupdates.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-checkupdates.o -MD -MP -MF $(DEPDIR)/eviacam-checkupdates.Tpo -c -o eviacam-checkupdates.o `test -f 'checkupdates.cpp' || echo '$(srcdir)/'`checkupdates.cpp
	$(am__mv) $(DEPDIR)/eviacam-checkupdates.Tpo $(DEPDIR)/eviacam-checkupdates.Po
#	source='checkupdates.cpp' object='eviacam-checkupdates.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-checkupdates.o `test -f 'checkupdates.cpp' || echo '$(srcdir)/'`checkupdates.cpp

eviacam-checkupdates.obj: checkupdates.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-checkupdates.obj -MD -MP -MF $(DEPDIR)/eviacam-checkupdates.Tpo -c -o eviacam-checkupdates.obj `if test -f 'checkupdates.cpp'; then $(CYGPATH_W) 'checkupdates.cpp'; else $(CYGPATH_W) '$(srcdir)/checkupdates.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-checkupdates.Tpo $(DEPDIR)/eviacam-checkupdates.Po
#	source='checkupdates.cpp' object='eviacam-checkupdates.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-checkupdates.obj `if test -f 'checkupdates.cpp'; then $(CYGPATH_W) 'checkupdates.cpp'; else $(CYGPATH_W) '$(srcdir)/checkupdates.cpp'; fi`

eviacam-checkupdates_ui.o: checkupdates_ui.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-checkupdates_ui.o -MD -MP -MF $(DEPDIR)/eviacam-checkupdates_ui.Tpo -c -o eviacam-checkupdates_ui.o `test -f 'checkupdates_ui.cpp' || echo '$(srcdir)/'`checkupdates_ui.cpp
	$(am__mv) $(DEPDIR)/eviacam-checkupdates_ui.Tpo $(DEPDIR)/eviacam-checkupdates_ui.Po
#	source='checkupdates_ui.cpp' object='eviacam-checkupdates_ui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-checkupdates_ui.o `test -f 'checkupdates_ui.cpp' || echo '$(srcdir)/'`checkupdates_ui.cpp

eviacam-checkupdates_ui.obj: checkupdates_ui.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-checkupdates_ui.obj -MD -MP -MF $(DEPDIR)/eviacam-checkupdates_ui.Tpo -c -o eviacam-checkupdates_ui.obj `if test -f 'checkupdates_ui.cpp'; then $(CYGPATH_W) 'checkupdates_ui.cpp'; else $(CYGPATH_W) '$(srcdir)/checkupdates_ui.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-checkupdates_ui.Tpo $(DEPDIR)/eviacam-checkupdates_ui.Po
#	source='checkupdates_ui.cpp' object='eviacam-checkupdates_ui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-checkupdates_ui.obj `if test -f 'checkupdates_ui.cpp'; then $(CYGPATH_W) 'checkupdates_ui.cpp'; else $(CYGPATH_W) '$(srcdir)/checkupdates_ui.cpp'; fi`

eviacam-website.o: website.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-website.o -MD -MP -MF $(DEPDIR)/eviacam-website.Tpo -c -o eviacam-website.o `test -f 'website.cpp' || echo '$(srcdir)/'`website.cpp
	$(am__mv) $(DEPDIR)/eviacam-website.Tpo $(DEPDIR)/eviacam-website.Po
#	source='website.cpp' object='eviacam-website.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-website.o `test -f 'website.cpp' || echo '$(srcdir)/'`website.cpp

eviacam-website.obj: website.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eviacam-website.obj -MD -MP -MF $(DEPDIR)/eviacam-website.Tpo -c -o eviacam-website.obj `if test -f 'website.cpp'; then $(CYGPATH_W) 'website.cpp'; else $(CYGPATH_W) '$(srcdir)/website.cpp'; fi`
	$(am__mv) $(DEPDIR)/eviacam-website.Tpo $(DEPDIR)/eviacam-website.Po
#	source='website.cpp' object='eviacam-website.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(eviacam_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eviacam-website.obj `if test -f 'website.cpp'; then $(CYGPATH_W) 'website.cpp'; else $(CYGPATH_W) '$(srcdir)/website.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-desktopDATA: $(desktop_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(desktopdir)" || $(MKDIR_P) "$(DESTDIR)$(desktopdir)"
	@list='$(desktop_DATA)'; test -n "$(desktopdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(desktopdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(desktopdir)" || exit $$?; \
	done

uninstall-desktopDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(desktop_DATA)'; test -n "$(desktopdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(desktopdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(desktopdir)" && rm -f $$files
install-dist_pkgdataDATA: $(dist_pkgdata_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(pkgdatadir)" || $(MKDIR_P) "$(DESTDIR)$(pkgdatadir)"
	@list='$(dist_pkgdata_DATA)'; test -n "$(pkgdatadir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgdatadir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgdatadir)" || exit $$?; \
	done

uninstall-dist_pkgdataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_pkgdata_DATA)'; test -n "$(pkgdatadir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(pkgdatadir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pkgdatadir)" && rm -f $$files
install-pixmapDATA: $(pixmap_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(pixmapdir)" || $(MKDIR_P) "$(DESTDIR)$(pixmapdir)"
	@list='$(pixmap_DATA)'; test -n "$(pixmapdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pixmapdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pixmapdir)" || exit $$?; \
	done

uninstall-pixmapDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(pixmap_DATA)'; test -n "$(pixmapdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(pixmapdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pixmapdir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(desktopdir)" "$(DESTDIR)$(pkgdatadir)" "$(DESTDIR)$(pixmapdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-desktopDATA install-dist_pkgdataDATA \
	install-pixmapDATA

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook
install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-desktopDATA \
	uninstall-dist_pkgdataDATA uninstall-pixmapDATA

.MAKE: install-am install-exec-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am \
	install-desktopDATA install-dist_pkgdataDATA install-dvi \
	install-dvi-am install-exec install-exec-am install-exec-hook \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-pixmapDATA \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-desktopDATA uninstall-dist_pkgdataDATA \
	uninstall-pixmapDATA

install-exec-hook:
	chmod u+s $(DESTDIR)$(bindir)/eviacamloader

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
